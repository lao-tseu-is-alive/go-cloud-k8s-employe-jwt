name: Release

on:
  push:
    # Publish semver tags as releases.
    tags: [ 'v[0-9]+.[0-9]+.[0-9]+' ]


permissions:
  contents: write # Grant write access to repository contents
  actions: read # Grant read access to repository actions
  discussions: read # Grant read access to repository discussions

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest # Use ubuntu-latest to build, as it supports cross-compilation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to checkout your repository code
      - name: Set env
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "REVISION=$(git describe --dirty --always)" >> $GITHUB_ENV
          echo "NOW=$(date +%Y-%m-%dT%T)" >> $GITHUB_ENV
          echo "APP_REPOSITORY=github.com/${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          
      - name: Compose LDFLAGS
        run: |
          LDFLAGS="-s -w -X ${APP_REPOSITORY}/pkg/version.BuildStamp=${NOW} -X ${APP_REPOSITORY}/pkg/version.REVISION=${REVISION}"
          echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
        env:
          APP_REPOSITORY: ${{ env.APP_REPOSITORY }}
          NOW: ${{ env.NOW }}
          REVISION: ${{ env.REVISION }}
          
      - name: Show LDFLAGS
        run: echo "$LDFLAGS"
        env:
          LDFLAGS: ${{ env.LDFLAGS }}
      
      - name: Preparing Test Env
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}   
      - name: Setup Go
        uses: actions/setup-go@v5 # Action to set up the Go environment
        with:
          go-version: '1.24.4' # Specify the Go version you want to use
      - run: go version

      - name: Build
        run: |
          # Set environment variables for cross-compilation
          # GOOS: target operating system
          # GOARCH: target architecture
          # CGO_ENABLED=0: Disable CGO for static linking (recommended for portability)
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="$LDFLAGS" -o goEmployeJwtServer-linux-amd64 ./cmd/goEmployeJwtServer/goEmployeJwtServer.go 
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="$LDFLAGS" -o goEmployeJwtServer-windows-amd64.exe ./cmd/goEmployeJwtServer/goEmployeJwtServer.go
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="$LDFLAGS" -o goEmployeJwtServer-darwin-amd64 ./cmd/goEmployeJwtServer/goEmployeJwtServer.go
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="$LDFLAGS" -o goEmployeJwtServer-linux-arm64 ./cmd/goEmployeJwtServer/goEmployeJwtServer.go
          GOOS=windows GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="$LDFLAGS" -o goEmployeJwtServer-windows-arm64.exe ./cmd/goEmployeJwtServer/goEmployeJwtServer.go
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="$LDFLAGS" -o goEmployeJwtServer-darwin-arm64 ./cmd/goEmployeJwtServer/goEmployeJwtServer.go

      - name: Create Archives
        run: |
          tar -czvf goEmployeJwtServer-linux-amd64.tar.gz goEmployeJwtServer-linux-amd64
          tar -czvf goEmployeJwtServer-darwin-amd64.tar.gz goEmployeJwtServer-darwin-amd64
          zip goEmployeJwtServer-windows-amd64.zip goEmployeJwtServer-windows-amd64.exe
          tar -czvf goEmployeJwtServer-linux-arm64.tar.gz goEmployeJwtServer-linux-arm64
          tar -czvf goEmployeJwtServer-darwin-arm64.tar.gz goEmployeJwtServer-darwin-arm64
          zip goEmployeJwtServer-windows-arm64.zip goEmployeJwtServer-windows-arm64.exe

      - name: Calculate Sha256 hash
        run: |
          sha256sum goEmployeJwtServer-* > SHA256.txt

      - name: Upload Release Asset for Linux/macOS
        uses: softprops/action-gh-release@v2.2.2
        with:
          body:  Release${{ env.RELEASE_VERSION }}
          files: |
            goEmployeJwtServer-linux-amd64.tar.gz
            goEmployeJwtServer-darwin-amd64.tar.gz
            goEmployeJwtServer-windows-amd64.zip
            goEmployeJwtServer-linux-arm64.tar.gz
            goEmployeJwtServer-darwin-arm64.tar.gz
            goEmployeJwtServer-windows-arm64.zip
            SHA256.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions
